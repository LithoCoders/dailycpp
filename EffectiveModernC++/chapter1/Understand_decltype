
const int i = 0; // decltype(i) is const int
bool f(const Tuna & ob) //
// decltype(ob) const Tuna &
// decltype(f) bool(const Tuna &)


struct Tuna
{
	int a, b;
}

// decltype(Tuna::a) is int

Tuna ob; //decltype(ob) is Tuna

vector<int> vv; // decltype(vv) is vector<int>
				// decltype(v[0]) is int&
deque<int> aa;  // decltype(aa[0]) is int&

vector<bool> ee; //decltype(ee[0]) is bool (!not bool&)

// The use of auto before the function name has nothing
// to do with type deduction.
// Rather, it indicates that C++11â€™s trailing return type
// syntax is being used (func return type will be declared
// after ->)
auto f() -> int
{
	//...
}

template<typename Container, typename Index>
auto f(Container & c, Index i) -> decltype(c[i])
{
	return c[i];
}


deque<int> dd;
f(dd, 5) = 10; // Won't compile as auto return type deduction
// will strip the reference. To make it compile in C++14:

template<typename Container, typename Index>
decltype(auto) f(Container & c, Index i)
{
	retrun c[i];
}
